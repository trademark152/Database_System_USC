Q1
select users.name from users, reviews, movies where month(users.date_of_birth) = 4 and users.id = reviews.user_id and movies.name = "NOTEBOOK" and movies.id = reviews.movie_id and reviews.rating <=8 order by users.name DESC;


Q2:
part 0: find all ratings of user John doe
SELECT users.name AS name, movies.genre AS genre, reviews.rating AS rating FROM users, movies ,reviews WHERE movies.id = reviews.movie_id AND users.id = reviews.user_id AND users.name = "JOHN DOE";       

part 1: select highest average rating from user john doe and corresponding genre
SELECT * 
FROM
(SELECT AVG(rating) AS avg_rating, genre, name
 FROM(SELECT users.name AS name, movies.genre AS genre, reviews.rating AS rating 
FROM users, movies ,reviews
	WHERE movies.id =reviews.movie_id AND users.id = reviews.user_id AND users.name = "JOHN DOE") AS Q2_1 GROUP BY genre) AS Q2_2 GROUP BY genre ORDER BY avg_rating DESC limit 1;

part 2: select all movie from that genre
SELECT movies.name, movies.genre
 FROM movies, (SELECT * 
FROM
(SELECT AVG(rating) AS avg_rating, genre, name
 FROM(SELECT users.name AS name, movies.genre AS genre, reviews.rating AS rating 
FROM users, movies ,reviews
 WHERE movies.id =reviews.movie_id AND users.id = reviews.user_id AND users.name = "JOHN DOE") AS Q2_1 GROUP BY genre) AS Q2_2 GROUP BY genre ORDER BY avg_rating DESC limit 1) AS userFAV WHERE movies.genre = userFAV.genre
 ORDER BY movies.genre, movies.name ASC;

Q3:
part 0: select number of male leads for each movie
SELECT leads.movie_id AS movieid, COUNT(leads.actor_id) as numMaleLead
 FROM leads, actors
 WHERE leads.actor_id = actors.id
 AND actors.gender = "M"
 GROUP BY leads.movie_id
 ORDER BY numMaleLead DESC;

part 1: select movie with highest number of male leads
SELECT movieid, numMaleLead
 FROM 
(SELECT leads.movie_id AS movieid, COUNT(leads.actor_id) as numMaleLead
 FROM leads, actors
 WHERE leads.actor_id = actors.id
 AND actors.gender = "M"
 GROUP BY leads.movie_id
 ORDER BY numMaleLead DESC) as Q3_1 WHERE numMaleLead = (SELECT MAX(numMaleLead) FROM (SELECT leads.movie_id AS movieid, COUNT(leads.actor_id) as numMaleLead
 FROM leads, actors
 WHERE leads.actor_id = actors.id
 AND actors.gender = "M"
 GROUP BY leads.movie_id
 ORDER BY numMaleLead DESC) as Q3_1)
 ORDER BY movieid DESC;

Q4: List the name(s) of all comedy movie(s) that were released before 2006 
# and have reviews rating better than average rating of all movies,
# sorted in ascending order
SELECT name
 FROM (SELECT movieid, name, AVG(rating) AS avgrating
 FROM (SELECT reviews.movie_id AS movieid, movies.name AS name, movies.release_date as release_date, reviews.rating as rating
 FROM movies, reviews
 WHERE YEAR(movies.release_date)<2006
 AND movies.genre = "COMEDY" AND movies.id = reviews.movie_id
 ORDER BY movies.name) AS Q4_1
 GROUP BY movieid
 ORDER BY movieid) as Q4_3
 WHERE avgrating> (SELECT AVG(avgrating) FROM (SELECT reviews.movie_id, AVG(reviews.rating) AS avgrating
 FROM reviews
 GROUP BY reviews.movie_id) AS Q4_2)
 ORDER BY avgrating ASC;


Q5: List the movie id(s) and average reviews(s) where the average reviews higher than 9 
# and one of their leading actorss is the actors 'Mark Clarkson'. 
# Sort the output by average reviewss and then movie ids.
SELECT movieid, name, avgrating
	FROM (SELECT movieid, name, AVG(rating) AS avgrating
 FROM (SELECT reviews.movie_id AS movieid, movies.name AS name, movies.release_date as release_date, reviews.rating as rating
 FROM movies, reviews, actors, leads
 WHERE movies.id = reviews.movie_id
	AND movies.id = leads.movie_id
 AND leads.actor_id = actors.id AND actors.name = "MARK CLARKSON"
 ORDER BY movies.name) AS Q5_1
 GROUP BY movieid
 ORDER BY movieid) AS Q5_2
 WHERE avgrating> 9
 ORDER BY avgrating, movieid ASC;

Q6: 
SELECT actors1.name, actors2.name, shared_movie
	FROM actors actors1,actors actors2, (SELECT r1.actor_id as actors_a, r2.actor_id as actors_b, count(r1.movie_id) as shared_movie
 FROM leads r1 inner join leads r2 on r1.movie_id = r2.movie_id and r1.actor_id > r2.actor_id
 GROUP BY r1.actor_id, r2.actor_id
 ORDER BY shared_movie desc) as Q6_1
 WHERE shared_movie = 
(SELECT max(shared_movie) FROM (SELECT r1.actor_id as actors_a, r2.actor_id as actors_b, count(r1.movie_id) as shared_movie
 FROM leads r1 inner join leads r2 on r1.movie_id = r2.movie_id and r1.actor_id > r2.actor_id
 GROUP BY r1.actor_id, r2.actor_id
	ORDER BY shared_movie desc) as Q6_2)
 AND actors1.id = actors_a
 AND actors2.id = actors_b;
