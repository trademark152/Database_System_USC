SELECT * FROM users;
select * from movies;
select * from actors;
select * from reviews;
select * from leads;

# ANSWERING QUESTIONS:
#1. List the name(s) of the user(s) born in April who rated at most 8 
# for the movie 'Notebook'. Output their names sorted in descending order.
/* 
SELECT users.name
	FROM users, reviews, movies
	WHERE MONTH(users.date_of_birth) = 4 
		AND users.id = reviews.user_id
		AND movies.name = "NOTEBOOK"
		AND movies.id = reviews.movie_id
        AND reviews.rating <= 8
	ORDER BY users.name DESC;
*/

#2.	Find user ‘John Doe’'s favorite type of movie genre(s) 
#   based on his movie reviews ratings. List the name(s)
# and genre(s) of all the movie(s) under this/these movie genre(s) 
# sorted them based on the movie genre then movie name in the ascending order.
/*
# 2.1: select all reviews made by john doe
SELECT users.name, movies.genre AS genre, reviews.rating AS RATING 
	FROM users, movies ,reviews
	WHERE movies.id = reviews.movie_id
			AND users.id = reviews.user_id
            AND users.name = "JOHN DOE"
ORDER BY genre;

# 2.2: average all ratings of reviewss made by john doe grouping by genre
SELECT AVG(RATING) AS AVG_RATING, genre
FROM (SELECT users.name, movies.genre AS genre, reviews.rating AS RATING 
	FROM users, movies ,reviews
	WHERE movies.id = reviews.movie_id
			AND users.id = reviews.user_id
            AND users.name = "JOHN DOE") AS Q2_1
GROUP BY genre;

# 2.3: question 2, get the favorite type by getting the maximum of average ratings of John doe
SELECT name, genre, MAX(AVG_RATING)
FROM(
	SELECT AVG(RATING) AS AVG_RATING, genre, name
		FROM (SELECT users.name AS name, movies.genre AS genre, reviews.rating AS RATING 
			FROM users, movies ,reviews
					WHERE movies.id = reviews.movie_id
					AND   users.id = reviews.user_id
					AND   users.name = "JOHN DOE") AS Q2_1
		GROUP BY genre) AS Q2_2;           

#2.4: List the name(s)
# and genre(s) of all the movie(s) under this/these movie genre(s) 
# sorted them based on the movie genre then movie name in the ascending order.   
     
SELECT movies.name, movies.genre
	FROM movies, (SELECT name, genre, MAX(AVG_RATING)
						FROM(
							SELECT AVG(RATING) AS AVG_RATING, genre, name
								FROM (SELECT users.name AS name, movies.genre AS genre, reviews.rating AS RATING 
									FROM users, movies ,reviews
											WHERE movies.id = reviews.movie_id
											AND   users.id = reviews.user_id
											AND   users.name = "JOHN DOE") AS Q2_1
								GROUP BY genre) AS Q2_2) AS userFAV           

    WHERE movies.genre = userFAV.genre
    ORDER BY movies.genre, movies.name ASC;
*/
   
#3.	List the movie id(s) with most male lead. Sort the ids in descending order.
#3.1 list the movie id with MOST number of MALE leads
/*
SELECT leads.movie_id, COUNT(leads.actor_id) as numMaleLead
	FROM leads, actors
    WHERE leads.actor_id = actors.id
		AND actors.gender = "M"
	GROUP BY leads.movie_id
	ORDER BY numMaleLead DESC;

#3.2 select movie with most male leads
SELECT max(numMaleLead), movieid 
FROM (SELECT leads.movie_id AS movieid, COUNT(leads.actor_id) as numMaleLead
	FROM leads, actors
    WHERE leads.actor_id = actors.id
		AND actors.gender = "M"
	GROUP BY leads.movie_id
	ORDER BY numMaleLead DESC) as Q3_1;

# 3.3 select all movies with most male lead
SELECT movieid, numMaleLead
FROM (SELECT leads.movie_id AS movieid, COUNT(leads.actor_id) as numMaleLead
	FROM leads, actors
    WHERE leads.actor_id = actors.id
		AND actors.gender = "M"
	GROUP BY leads.movie_id
	ORDER BY numMaleLead DESC) as Q3_1
WHERE numMaleLead = (SELECT MAX(numMaleLead) FROM (SELECT leads.movie_id AS movieid, COUNT(leads.actor_id) as numMaleLead
														FROM leads, actors
														WHERE leads.actor_id = actors.id
															AND actors.gender = "M"
														GROUP BY leads.movie_id
														ORDER BY numMaleLead DESC) as Q3_1)
ORDER BY movieid DESC;
*/

#4.	List the name(s) of all comedy movie(s) that were released before 2006 
# and have reviews rating better than average rating of all movies,
# sorted in ascending order. Note that you should compute the average of movie average ratings, 
# not the average of all ratings. E.g. movie A got reviewss 10, 10, and 10, 
# and movie B got just one 6, the result should be ((10 + 10 + 10) / 3 + 6) / 2 = 8, 
#instead of (10 + 10 + 10 + 6) / 4 = 9.

# 4.1: select all comedy released before 2006
/*
SELECT movies.name, movies.release_date, reviews.rating
	FROM movies, reviews
	WHERE YEAR(movies.release_date)<2006
		AND movies.genre = "COMEDY"
        AND movies.id = reviews.movie_id
	ORDER BY movies.name;
    
#4.2: COMPUTE AVERAGE RATING FOR EACH movie
SELECT reviews.movie_id, AVG(reviews.rating) AS avgRating
	FROM reviews
    GROUP BY reviews.movie_id;
    
# 4.3: calculate average rating for all comedy movies before 2006:
SELECT movieid, name, AVG(rating) AS avgRating
	FROM (SELECT reviews.movie_id AS movieid, movies.name AS name, movies.release_date as release_date, reviews.rating as rating
			FROM movies, reviews
			WHERE YEAR(movies.release_date)<2006
				AND movies.genre = "COMEDY"
				AND movies.id = reviews.movie_id
			ORDER BY movies.name) AS Q4_1
    GROUP BY movieid
ORDER BY movieid;

# 4.4: calculate average rating of all average rating:
SELECT AVG(avgRating)
FROM (SELECT reviews.movie_id, AVG(reviews.rating) AS avgRating
	FROM reviews
    GROUP BY reviews.movie_id) AS Q4_2;
    
# 4.4: qUESTION 4:
SELECT name
FROM (SELECT movieid, name, AVG(rating) AS avgRating
		FROM (SELECT reviews.movie_id AS movieid, movies.name AS name, movies.release_date as release_date, reviews.rating as rating
				FROM movies, reviews
				WHERE YEAR(movies.release_date)<2006
					AND movies.genre = "COMEDY"
					AND movies.id = reviews.movie_id
				ORDER BY movies.name) AS Q4_1
		GROUP BY movieid
	ORDER BY movieid) as Q4_3
WHERE avgRating> (SELECT AVG(avgRating)
		FROM (SELECT reviews.movie_id, AVG(reviews.rating) AS avgRating
			FROM reviews
			GROUP BY reviews.movie_id) AS Q4_2)
ORDER BY avgRating ASC;
*/

#5.	List the movie id(s) and average reviews(s) where the average reviews higher than 9 
# and one of their leading actorss is the actors 'Mark Clarkson'. 
# Sort the output by average reviewss and then movie ids.

# 5.1: CALCULATE AVG RATING OF ALL movieS:
/*
SELECT movieid, name, AVG(rating) AS avgRating
	FROM (SELECT reviews.movie_id AS movieid, movies.name AS name, movies.release_date as release_date, reviews.rating as rating
			FROM movies, reviews
			WHERE movies.id = reviews.movie_id) AS Q4_1
    GROUP BY movieid
ORDER BY movieid;

# 5.2: qUESTION 5

SELECT movieid, name, avgRating
FROM (SELECT movieid, name, AVG(rating) AS avgRating
		FROM (SELECT reviews.movie_id AS movieid, movies.name AS name, movies.release_date as release_date, reviews.rating as rating
				FROM movies, reviews, actors, leads
				WHERE movies.id = reviews.movie_id
					AND movies.id = leads.movie_id
                    AND leads.actor_id = actors.id
                    AND actors.name = "MARK CLARKSON"
				ORDER BY movies.name) AS Q5_1
		GROUP BY movieid
	ORDER BY movieid) as Q5_2
WHERE avgRating> 9
ORDER BY avgRating, movieid ASC;
*/

#6.	Find the actorss who played the lead together the most. 
# Display these their names and the number of times they played the lead together. 
# Note: The resulting table must show both actorss info in the same row (actors1 and actors2). 
# This might result in duplicate data where two rows might have the same actorss 
# but in different columns. Here is an example of two actorss that played the lead
#  in two movies together.

# 6.1: count the number of shared movie between 2 actorss
SELECT r1.actor_id as actors_a, r2.actor_id as actors_b, count(r1.movie_id) as shared_movie
	FROM leads r1 inner join leads r2 on r1.movie_id = r2.movie_id and r1.actor_id > r2.actor_id
	group by r1.actor_id, r2.actor_id
	order by shared_movie desc;

# 6.2: 
SELECT actors1.name, actors2.name, shared_movie
	FROM actors actors1,actors actors2, (SELECT r1.actor_id as actors_a, r2.actor_id as actors_b, count(r1.movie_id) as shared_movie
						FROM leads r1 inner join leads r2 on r1.movie_id = r2.movie_id and r1.actor_id > r2.actor_id
						group by r1.actor_id, r2.actor_id
						order by shared_movie desc) as Q6_1
    WHERE shared_movie = (select max(shared_movie) from (SELECT r1.actor_id as actors_a, r2.actor_id as actors_b, count(r1.movie_id) as shared_movie
							FROM leads r1 inner join leads r2 on r1.movie_id = r2.movie_id and r1.actor_id > r2.actor_id
							group by r1.actor_id, r2.actor_id
							order by shared_movie desc) as Q6_2 )
		AND actors1.id = actors_a
        AND actors2.id = actors_b;
